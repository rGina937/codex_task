import { bucketFill } from "./fillCmd";

describe("fill command tests", () => {
  let canvas;
  beforeEach(() => {
    canvas = [
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "x",
        "x",
        "x",
      ],
      [
        "",
        "x",
        "x",
        "x",
        "x",
        "x",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "",
        "",
        "x",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "",
        "",
        "x",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "x",
        "x",
        "x",
      ],
    ];
  });

  test("should throw [Wrong cmd length. Example: B 10 3 o]", () => {
    expect(() => {
      bucketFill(canvas, ["B", 10, 3, "o", "cat"]);
    }).toThrowError("Wrong cmd length. Example: B 10 3 o");
  });

  test("should throw [Wrong cmd length. Example: B 10 3 o]", () => {
    expect(() => {
      bucketFill(canvas, ["B", 10, 3]);
    }).toThrowError("Wrong cmd length. Example: B 10 3 o");
  });

  test("should throw [cmd[1] must be positive integer number]", () => {
    expect(() => {
      bucketFill(canvas, ["B", 0, 3, "o"]);
    }).toThrowError("cmd[1] must be positive integer number");
  });

  test("should throw [cmd[2] must be positive integer number]", () => {
    expect(() => {
      bucketFill(canvas, ["B", 10, "cat", "o"]);
    }).toThrowError("cmd[2] must be positive integer number");
  });

  test("should throw [cmd[1] should be less then maxX]", () => {
    expect(() => {
      bucketFill(canvas, ["B", 21, 3, "o"]);
    }).toThrowError("cmd[1] should be less then maxX");
  });

  test("should throw [cmd[2] should be less then maxY]", () => {
    expect(() => {
      bucketFill(canvas, ["B", 10, 100, "o"]);
    }).toThrowError("cmd[2] should be less then maxY");
  });

  test("fill free area", () => {
    expect(bucketFill(canvas, ["B", 10, 3, "o"])).toEqual([
      [
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "x",
        "x",
        "x",
        "x",
      ],
      [
        "o",
        "x",
        "x",
        "x",
        "x",
        "x",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "x",
        "",
        "",
        "x",
      ],
      [
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "x",
        "",
        "",
        "x",
      ],
      [
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "o",
        "x",
        "x",
        "x",
        "x",
      ],
    ]);
  });

  test("fill area inside rectangle", () => {
    expect(bucketFill(canvas, ["B", 18, 2, "5"])).toEqual([
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "x",
        "x",
        "x",
      ],
      [
        "",
        "x",
        "x",
        "x",
        "x",
        "x",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "5",
        "5",
        "x",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "5",
        "5",
        "x",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "x",
        "x",
        "x",
      ],
    ]);
  });

  test("fill line", () => {
    expect(bucketFill(canvas, ["B", 3, 2, "M"])).toEqual([
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "x",
        "x",
        "x",
      ],
      [
        "",
        "M",
        "M",
        "M",
        "M",
        "M",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "",
        "",
        "x",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "",
        "",
        "x",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "x",
        "x",
        "x",
      ],
    ]);
  });

  test("fill rectangle", () => {
    expect(bucketFill(canvas, ["B", 17, 3, ")"])).toEqual([
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ")",
        ")",
        ")",
        ")",
      ],
      [
        "",
        "x",
        "x",
        "x",
        "x",
        "x",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ")",
        "",
        "",
        ")",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ")",
        "",
        "",
        ")",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ")",
        ")",
        ")",
        ")",
      ],
    ]);
  });
});
