import { createRectangle } from "./rectangleCmd";

describe("rectangle command tests", () => {
  let canvas;

  test("should throw [object cannot have non digit arg]", () => {
    expect(() => {
      createRectangle(canvas, ["R", 1, 2, 3, "e"]);
    }).toThrowError("object cannot have non digit arg");
  });

  test("should throw [object cannot fit in canvas. ${x1} is greater that ${maxX}]", () => {
    expect(() => {
      createRectangle(canvas, ["R", 21, 2, 3, 4]);
    }).toThrowError(`object cannot fit in canvas. 21 is greater that 20`);
  });

  test("should throw [object cannot fit in canvas. ${y1} is greater that ${maxY}]", () => {
    expect(() => {
      createRectangle(canvas, ["R", 1, 6, 3, 3]);
    }).toThrowError(`object cannot fit in canvas. 6 is greater that 4`);
  });

  test("should throw [object cannot fit in canvas. ${x2} is greater that ${maxX}]", () => {
    expect(() => {
      createRectangle(canvas, ["R", 1, 2, 99, 3]);
    }).toThrowError(`object cannot fit in canvas. 99 is greater that 20`);
  });

  test("should throw [object cannot fit in canvas. ${y2} is greater that ${maxY}]", () => {
    expect(() => {
      createRectangle(canvas, ["R", 1, 2, 3, 5]);
    }).toThrowError(`object cannot fit in canvas. 5 is greater that 4`);
  });

  test("create rectangle on the right side", () => {
    expect(createRectangle(canvas, ["L", 17, 1, 20, 4])).toEqual([
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "x",
        "x",
        "x",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "",
        "",
        "x",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "",
        "",
        "x",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "x",
        "x",
        "x",
      ],
    ]);
  });

  test("create rectangle in center", () => {
    expect(createRectangle(canvas, ["L", 9, 1, 11, 4])).toEqual([
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "x",
        "x",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "",
        "x",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "",
        "x",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "x",
        "x",
        "x",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
      ],
    ]);
  });

  test("create rectangle on left side", () => {
    expect(createRectangle(canvas, ["L", 1, 2, 6, 4])).toEqual([
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
      ],
      [
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
      ],
      [
        "x",
        "",
        "",
        "",
        "",
        "x",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
      ],
      [
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
      ],
    ]);
  });

  beforeEach(() => {
    canvas = [
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
      ],
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
      ],
    ];
  });
});
